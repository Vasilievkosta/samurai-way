{"version":3,"file":"static/js/961.76c6a0a3.chunk.js","mappings":"4JACA,MAAuB,sBAAvB,EAAuD,yBAAvD,EAA2F,0B,mBCM9EA,EAAa,SAACC,GAC1B,IAAMC,EAAI,mBAAeD,EAAME,IAC/B,OACC,gBAAKC,UAAU,SAAf,UACC,SAAC,KAAD,CAASC,GAAIH,EAAb,SAAoBD,EAAMK,UCLhBC,EAAc,SAACN,GAC3B,OAAO,eAAIG,UAAU,UAAd,SAAyBH,EAAMO,W,uCCKjCC,GAAcC,EAAAA,EAAAA,GAAiB,IAqB/BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAAEC,KAAM,WAAhCD,EAnBsC,SAACX,GAC/D,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,YAAY,eACZX,KAAK,aACLY,UAAWC,EAAAA,EACXC,YAAY,WACZC,SAAU,CAACC,EAAAA,EAAUb,QAG7B,0BACI,6CAgChB,EAxBgB,SAACR,GAKb,OACI,iBAAKG,UAAWmB,EAAhB,WACI,gBAAKnB,UAAWmB,EAAhB,SACKtB,EAAMuB,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAC3B,SAAC3B,EAAD,CAAYM,KAAMqB,EAAErB,KAAMH,GAAIwB,EAAExB,IAASwB,EAAExB,UAGnD,eAAIC,UAAWmB,EAAf,SACKtB,EAAMuB,YAAYI,SAASF,KAAI,SAACG,GAAD,OAC5B,SAACtB,EAAD,CAAaC,QAASqB,EAAErB,SAAcqB,EAAE1B,UAGhD,0BACI,SAACQ,EAAD,CAAqBG,SAjBX,SAACgB,GACnB7B,EAAM8B,mBAAmBD,EAAME,qB,kEC5BjCC,EAAkB,SAACC,GACrB,MAAO,CACHC,WAAYD,EAAME,KAAKD,a,ICoB/B,GAAeE,E,QAAAA,KAA6BC,EAAAA,EAAAA,KAdtB,SAACJ,GACnB,MAAO,CACHV,YAAaU,EAAMV,gBAIF,SAACe,GACtB,MAAO,CACHR,mBAAoB,SAACC,GACjBO,GAASC,EAAAA,EAAAA,GAAcR,UDX5B,SAA6BS,GAWhC,OAF+BH,EAAAA,EAAAA,IAAQL,EAARK,EARL,SAACrC,GACvB,IAAMkC,EAA6BlC,EAA7BkC,WAAeO,GAArB,OAAmCzC,EAAnC,GAEA,OAAmB,IAAfkC,GAAyB,SAAC,KAAD,CAAU9B,GAAI,YAEpC,SAACoC,GAAD,UAAgBC,SCU/B,CAA4GC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem.tsx","components/Dialogs/MessageItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Dialogs_wrap__VKE-D\",\"dialogs\":\"Dialogs_dialogs__tukho\",\"messages\":\"Dialogs_messages__o5I5w\"};","import { NavLink } from 'react-router-dom'\r\n\r\nexport type DialogType = {\r\n\tname: string,\r\n\tid: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogType) => {\r\n\tconst path = `/dialogs/${props.id}`\r\n\treturn (\r\n\t\t<div className=\"dialog\">\r\n\t\t\t<NavLink to={path}>{props.name}</NavLink>\r\n\t\t</div >\r\n\t)\r\n}\r\n","\r\nexport type MessageType = {\r\n\tid?: string,\r\n\tmessage: string\r\n}\r\n\r\nexport const MessageItem = (props: MessageType) => {\r\n\treturn <li className=\"message\">{props.message}</li >\r\n}","import s from './Dialogs.module.css'\r\nimport { DialogItem } from './DialogItem'\r\nimport { MessageItem } from './MessageItem'\r\nimport { DialogsType } from './DialogsContainer'\r\nimport { reduxForm, Field, InjectedFormProps } from 'redux-form'\r\nimport { maxLengthCreator, required } from 'utils/validators/validators'\r\nimport { Element } from 'components/common/Controls/FormControls'\r\n\r\ntype FormDataType = {\r\n    newMessage: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder=\"your message\"\r\n                    name=\"newMessage\"\r\n                    component={Element}\r\n                    elementType=\"textarea\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({ form: 'dialogs' })(AddMessageForm)\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n    const addNewMessage = (value: FormDataType) => {\r\n        props.sendMessageHandler(value.newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div className={s.dialogs}>\r\n                {props.dialogsPage.dialogs.map((d) => (\r\n                    <DialogItem name={d.name} id={d.id} key={d.id} />\r\n                ))}\r\n            </div>\r\n            <ul className={s.messages}>\r\n                {props.dialogsPage.messages.map((m) => (\r\n                    <MessageItem message={m.message} key={m.id} />\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                <AddMessageReduxForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import { ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from 'redux/redux-store'\r\n\r\ntype MapStatePropsType = {\r\n    resultCode: number\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        resultCode: state.auth.resultCode,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let { resultCode, ...restProps } = props\r\n\r\n        if (resultCode === 1) return <Redirect to={'/login'} />\r\n\r\n        return <Component {...(restProps as T & {})} />\r\n    }\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectRedirectComponent\r\n}\r\n","import Dialogs from './Dialogs'\r\nimport { ActionType, AppStateType } from 'redux/redux-store'\r\nimport { connect } from 'react-redux'\r\nimport { InitialStateDialogsType, sendMessageAC } from 'redux/dialogs-reducer'\r\nimport { withAuthRedirect } from 'hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessageHandler: (newMessage: string) => void\r\n}\r\n\r\nexport type DialogsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionType) => void): MapDispatchPropsType => {\r\n    return {\r\n        sendMessageHandler: (newMessage: string) => {\r\n            dispatch(sendMessageAC(newMessage))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\r\n"],"names":["DialogItem","props","path","id","className","to","name","MessageItem","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Element","elementType","validate","required","s","dialogsPage","dialogs","map","d","messages","m","value","sendMessageHandler","newMessage","mapStateToProps","state","resultCode","auth","compose","connect","dispatch","sendMessageAC","Component","restProps","Dialogs"],"sourceRoot":""}